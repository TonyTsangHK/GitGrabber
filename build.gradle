buildscript {
    ext.kotlin_version = "1.1.3"

    repositories {
        jcenter();
    }
}

plugins {
    id "java"
    id "application"
    id "org.jetbrains.kotlin.jvm" version "1.1.3"
}

allprojects {
    repositories {
        jcenter()
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = "1.8"
        targetCompatibility = "1.8"
        options.encoding = "UTF-8"
    }
}

mainClassName = 'utils.git.app.GitDependencyHandler'

version = file('src/version').text

task copyReadme(type: Copy) {
    outputs.files+file("$buildDir/README.md")
    outputs.files+file("README.md")
    outputs.upToDateWhen { false }
    copy {
        from '.'
        include 'README.md.template'
        into buildDir
        rename {
            file -> 'README.md'
        }
        expand(project: project, version: version)
    }
    copy {
        from '.'
        include 'README.md.template'
        into '.'
        rename {
            file -> 'README.md'
        }
        expand(project: project, version: version)
    }
}

applicationDistribution.from(copyReadme) {
    include 'README.md'
}

distZip {
    duplicatesStrategy= DuplicatesStrategy.EXCLUDE
    def baseDir = { archiveName - ".zip" }
    into("${baseDir}/${rootProject.name}-${version}/bin") {
        from 'customScripts'
        include "*"
    }
}

task copyToReleases(type: Copy) {
    outputs.file file("latest-release/GitGrabber-latest.zip")
    outputs.upToDateWhen { false }
    from distZip.outputs
    into("latest-release")
    rename {
        file -> "GitGrabber-latest.zip"
    }
}

configure(copyToReleases) {
    group = "distribution"
    description = "Copy lastest distribution zip file to releases"
}

distZip.dependsOn copyReadme
copyToReleases.dependsOn distZip

configurations {
    all*.exclude group: 'log4j', module: 'log4j'
    all*.exclude group: 'commons-logging', module: 'commons-logging'
}

dependencies {
    compile project(':JSON')
    compile project(':JsonUtils')
    compile project(':Utilities')
    compile project(':UIUtils')

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    compile group: 'com.jcraft', name: 'jsch', version: '0.1.54'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
    compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.21'
    compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.21'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
    compile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '4.4.1.201607150455-r'
    compile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit.archive', version: '4.4.1.201607150455-r'
    compile group: 'args4j', name: 'args4j', version: '2.0.31'
}

sourceSets {
    main {
        output.resourcesDir = "$buildDir/classes/main"
        java {
            srcDir 'src'
        }
        kotlin {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
            exclude '**/*.java'
            exclude '**/*.kt'
        }
    }
    test {
        java {
            srcDir 'test'
        }
        kotlin {
            srcDir 'test'
        }
        resources {
            srcDir 'test'
            exclude '**/*.java'
            exclude '**/*.kt'
        }
    }
}
